diff -Naur a/source3/modules/vfs_fruit.c b/source3/modules/vfs_fruit.c
--- a/source3/modules/vfs_fruit.c	2018-09-06 09:59:20.000000000 +0200
+++ b/source3/modules/vfs_fruit.c	2018-10-05 12:01:54.000000000 +0200
@@ -403,8 +403,8 @@
 };
 
 struct ad_entry {
-	size_t ade_off;
-	size_t ade_len;
+	off_t ade_off;
+	off_t ade_len;
 };
 
 struct adouble {
@@ -484,7 +484,7 @@
 			const struct smb_filename *smb_fname__in,
 			struct smb_filename **ppsmb_fname_out);
 static AfpInfo *afpinfo_new(TALLOC_CTX *ctx);
-static ssize_t afpinfo_pack(const AfpInfo *ai, char *buf);
+static soff_t afpinfo_pack(const AfpInfo *ai, char *buf);
 static AfpInfo *afpinfo_unpack(TALLOC_CTX *ctx, const void *data);
 
 
@@ -496,7 +496,7 @@
 static char *ad_get_entry(const struct adouble *ad, int eid)
 {
 	off_t off = ad_getentryoff(ad, eid);
-	size_t len = ad_getentrylen(ad, eid);
+	off_t len = ad_getentrylen(ad, eid);
 
 	if (off == 0 || len == 0) {
 		return NULL;
@@ -810,11 +810,11 @@
 /**
  * Unpack an AppleDouble blob into a struct adoble
  **/
-static bool ad_unpack(struct adouble *ad, const size_t nentries,
-		      size_t filesize)
+static bool ad_unpack(struct adouble *ad, const off_t nentries,
+		      off_t filesize)
 {
-	size_t bufsize = talloc_get_size(ad->ad_data);
-	size_t adentries, i;
+	off_t bufsize = talloc_get_size(ad->ad_data);
+	off_t adentries, i;
 	uint32_t eid, len, off;
 	bool ok;
 
@@ -969,7 +969,7 @@
 		char *tmp = NULL;
 		struct smb_filename *stream_name = NULL;
 		files_struct *fsp = NULL;
-		ssize_t nwritten;
+		soff_t nwritten;
 
 		status = string_replace_allocate(ad->ad_handle->conn,
 						 e->adx_name,
@@ -1067,7 +1067,7 @@
 {
 	int rc = 0;
 	char *map = MAP_FAILED;
-	size_t origlen;
+	off_t origlen;
 	bool ok;
 
 	origlen = ad_getentryoff(ad, ADEID_RFORK) +
@@ -1114,11 +1114,11 @@
 /**
  * Read and parse Netatalk AppleDouble metadata xattr
  **/
-static ssize_t ad_read_meta(struct adouble *ad,
+static soff_t ad_read_meta(struct adouble *ad,
 				const struct smb_filename *smb_fname)
 {
 	int      rc = 0;
-	ssize_t  ealen;
+	soff_t  ealen;
 	bool     ok;
 
 	DEBUG(10, ("reading meta xattr for %s\n", smb_fname->base_name));
@@ -1282,7 +1282,7 @@
 	return 0;
 }
 
-static ssize_t ad_read_rsrc_xattr(struct adouble *ad)
+static soff_t ad_read_rsrc_xattr(struct adouble *ad)
 {
 	int ret;
 	SMB_STRUCT_STAT st;
@@ -1299,7 +1299,7 @@
 	return st.st_ex_size;
 }
 
-static ssize_t ad_read_rsrc_adouble(struct adouble *ad,
+static soff_t ad_read_rsrc_adouble(struct adouble *ad,
 				const struct smb_filename *smb_fname)
 {
 	SMB_STRUCT_STAT sbuf;
@@ -1308,9 +1308,9 @@
 	DATA_BLOB aiblob;
 	struct smb_filename *stream_name = NULL;
 	files_struct *fsp = NULL;
-	ssize_t len;
-	size_t size;
-	ssize_t nwritten;
+	soff_t len;
+	off_t size;
+	soff_t nwritten;
 	NTSTATUS status;
 	int saved_errno = 0;
 	int ret;
@@ -1483,11 +1483,11 @@
 /**
  * Read and parse resource fork, either ._ AppleDouble file or xattr
  **/
-static ssize_t ad_read_rsrc(struct adouble *ad,
+static soff_t ad_read_rsrc(struct adouble *ad,
 			const struct smb_filename *smb_fname)
 {
 	struct fruit_config_data *config = NULL;
-	ssize_t len;
+	soff_t len;
 
 	SMB_VFS_HANDLE_GET_DATA(ad->ad_handle, config,
 				struct fruit_config_data, return -1);
@@ -1504,7 +1504,7 @@
 /**
  * Read and unpack an AppleDouble metadata xattr or resource
  **/
-static ssize_t ad_read(struct adouble *ad, const struct smb_filename *smb_fname)
+static soff_t ad_read(struct adouble *ad, const struct smb_filename *smb_fname)
 {
 	switch (ad->ad_type) {
 	case ADOUBLE_META:
@@ -1541,7 +1541,7 @@
 				adouble_type_t type)
 {
 	int rc = 0;
-	size_t adsize = 0;
+	off_t adsize = 0;
 	struct adouble *ad;
 	struct fruit_config_data *config;
 
@@ -1656,7 +1656,7 @@
 				       adouble_type_t type)
 {
 	int rc = 0;
-	ssize_t len;
+	soff_t len;
 	struct adouble *ad = NULL;
 	int mode;
 
@@ -1791,7 +1791,7 @@
 static int ad_fset(struct adouble *ad, files_struct *fsp)
 {
 	int rc = -1;
-	ssize_t len;
+	soff_t len;
 	bool ok;
 
 	DBG_DEBUG("Path [%s]\n", fsp_str_dbg(fsp));
@@ -2061,7 +2061,7 @@
  * Buffer size must be at least AFP_INFO_SIZE
  * Returns size of packed buffer
  **/
-static ssize_t afpinfo_pack(const AfpInfo *ai, char *buf)
+static soff_t afpinfo_pack(const AfpInfo *ai, char *buf)
 {
 	memset(buf, 0, AFP_INFO_SIZE);
 
@@ -2550,7 +2550,7 @@
 	uint64_t req_bitmap, client_caps;
 	uint64_t server_caps = SMB2_CRTCTX_AAPL_UNIX_BASED;
 	smb_ucs2_t *model;
-	size_t modellen;
+	off_t modellen;
 
 	SMB_VFS_HANDLE_GET_DATA(handle, config, struct fruit_config_data,
 				return NT_STATUS_UNSUCCESSFUL);
@@ -2690,7 +2690,7 @@
 {
 	struct smb_filename *stream_name = NULL;
 	files_struct *fsp = NULL;
-	ssize_t nread;
+	soff_t nread;
 	NTSTATUS status;
 	int ret;
 	bool ok;
@@ -3130,7 +3130,7 @@
 {
 	AfpInfo *ai = NULL;
 	char afpinfo_buf[AFP_INFO_SIZE];
-	ssize_t len, written;
+	soff_t len, written;
 	int hostfd = -1;
 	int rc = -1;
 
@@ -3922,11 +3922,11 @@
 	return SMB_VFS_NEXT_RMDIR(handle, smb_fname);
 }
 
-static ssize_t fruit_pread_meta_stream(vfs_handle_struct *handle,
+static soff_t fruit_pread_meta_stream(vfs_handle_struct *handle,
 				       files_struct *fsp, void *data,
-				       size_t n, off_t offset)
+				       off_t n, off_t offset)
 {
-	ssize_t nread;
+	soff_t nread;
 	int ret;
 
 	nread = SMB_VFS_NEXT_PREAD(handle, fsp, data, n, offset);
@@ -3948,15 +3948,15 @@
 	return -1;
 }
 
-static ssize_t fruit_pread_meta_adouble(vfs_handle_struct *handle,
+static soff_t fruit_pread_meta_adouble(vfs_handle_struct *handle,
 					files_struct *fsp, void *data,
-					size_t n, off_t offset)
+					off_t n, off_t offset)
 {
 	AfpInfo *ai = NULL;
 	struct adouble *ad = NULL;
 	char afpinfo_buf[AFP_INFO_SIZE];
 	char *p = NULL;
-	ssize_t nread;
+	soff_t nread;
 
 	ai = afpinfo_new(talloc_tos());
 	if (ai == NULL) {
@@ -3992,13 +3992,13 @@
 	return nread;
 }
 
-static ssize_t fruit_pread_meta(vfs_handle_struct *handle,
+static soff_t fruit_pread_meta(vfs_handle_struct *handle,
 				files_struct *fsp, void *data,
-				size_t n, off_t offset)
+				off_t n, off_t offset)
 {
 	struct fio *fio = (struct fio *)VFS_FETCH_FSP_EXTENSION(handle, fsp);
-	ssize_t nread;
-	ssize_t to_return;
+	soff_t nread;
+	soff_t to_return;
 
 	/*
 	 * OS X has a off-by-1 error in the offset calculation, so we're
@@ -4038,26 +4038,26 @@
 	return nread;
 }
 
-static ssize_t fruit_pread_rsrc_stream(vfs_handle_struct *handle,
+static soff_t fruit_pread_rsrc_stream(vfs_handle_struct *handle,
 				       files_struct *fsp, void *data,
-				       size_t n, off_t offset)
+				       off_t n, off_t offset)
 {
 	return SMB_VFS_NEXT_PREAD(handle, fsp, data, n, offset);
 }
 
-static ssize_t fruit_pread_rsrc_xattr(vfs_handle_struct *handle,
+static soff_t fruit_pread_rsrc_xattr(vfs_handle_struct *handle,
 				      files_struct *fsp, void *data,
-				      size_t n, off_t offset)
+				      off_t n, off_t offset)
 {
 	return SMB_VFS_NEXT_PREAD(handle, fsp, data, n, offset);
 }
 
-static ssize_t fruit_pread_rsrc_adouble(vfs_handle_struct *handle,
+static soff_t fruit_pread_rsrc_adouble(vfs_handle_struct *handle,
 					files_struct *fsp, void *data,
-					size_t n, off_t offset)
+					off_t n, off_t offset)
 {
 	struct adouble *ad = NULL;
-	ssize_t nread;
+	soff_t nread;
 
 	ad = ad_fget(talloc_tos(), handle, fsp, ADOUBLE_RSRC);
 	if (ad == NULL) {
@@ -4071,12 +4071,12 @@
 	return nread;
 }
 
-static ssize_t fruit_pread_rsrc(vfs_handle_struct *handle,
+static soff_t fruit_pread_rsrc(vfs_handle_struct *handle,
 				files_struct *fsp, void *data,
-				size_t n, off_t offset)
+				off_t n, off_t offset)
 {
 	struct fio *fio = (struct fio *)VFS_FETCH_FSP_EXTENSION(handle, fsp);
-	ssize_t nread;
+	soff_t nread;
 
 	if (fio == NULL) {
 		errno = EINVAL;
@@ -4104,12 +4104,12 @@
 	return nread;
 }
 
-static ssize_t fruit_pread(vfs_handle_struct *handle,
+static soff_t fruit_pread(vfs_handle_struct *handle,
 			   files_struct *fsp, void *data,
-			   size_t n, off_t offset)
+			   off_t n, off_t offset)
 {
 	struct fio *fio = (struct fio *)VFS_FETCH_FSP_EXTENSION(handle, fsp);
-	ssize_t nread;
+	soff_t nread;
 
 	DBG_DEBUG("Path [%s] offset=%"PRIdMAX", size=%zd\n",
 		  fsp_str_dbg(fsp), (intmax_t)offset, n);
@@ -4150,7 +4150,7 @@
 }
 
 struct fruit_pread_state {
-	ssize_t nread;
+	soff_t nread;
 	struct vfs_aio_state vfs_aio_state;
 };
 
@@ -4162,7 +4162,7 @@
 	struct tevent_context *ev,
 	struct files_struct *fsp,
 	void *data,
-	size_t n, off_t offset)
+	off_t n, off_t offset)
 {
 	struct tevent_req *req = NULL;
 	struct tevent_req *subreq = NULL;
@@ -4213,7 +4213,7 @@
 	tevent_req_done(req);
 }
 
-static ssize_t fruit_pread_recv(struct tevent_req *req,
+static soff_t fruit_pread_recv(struct tevent_req *req,
 					struct vfs_aio_state *vfs_aio_state)
 {
 	struct fruit_pread_state *state = tevent_req_data(
@@ -4227,12 +4227,12 @@
 	return state->nread;
 }
 
-static ssize_t fruit_pwrite_meta_stream(vfs_handle_struct *handle,
+static soff_t fruit_pwrite_meta_stream(vfs_handle_struct *handle,
 					files_struct *fsp, const void *data,
-					size_t n, off_t offset)
+					off_t n, off_t offset)
 {
 	AfpInfo *ai = NULL;
-	size_t nwritten;
+	off_t nwritten;
 	bool ok;
 
 	ai = afpinfo_unpack(talloc_tos(), data);
@@ -4263,9 +4263,9 @@
 	return n;
 }
 
-static ssize_t fruit_pwrite_meta_netatalk(vfs_handle_struct *handle,
+static soff_t fruit_pwrite_meta_netatalk(vfs_handle_struct *handle,
 					  files_struct *fsp, const void *data,
-					  size_t n, off_t offset)
+					  off_t n, off_t offset)
 {
 	struct adouble *ad = NULL;
 	AfpInfo *ai = NULL;
@@ -4321,12 +4321,12 @@
 	return n;
 }
 
-static ssize_t fruit_pwrite_meta(vfs_handle_struct *handle,
+static soff_t fruit_pwrite_meta(vfs_handle_struct *handle,
 				 files_struct *fsp, const void *data,
-				 size_t n, off_t offset)
+				 off_t n, off_t offset)
 {
 	struct fio *fio = (struct fio *)VFS_FETCH_FSP_EXTENSION(handle, fsp);
-	ssize_t nwritten;
+	soff_t nwritten;
 
 	/*
 	 * Writing an all 0 blob to the metadata stream
@@ -4365,26 +4365,26 @@
 	return nwritten;
 }
 
-static ssize_t fruit_pwrite_rsrc_stream(vfs_handle_struct *handle,
+static soff_t fruit_pwrite_rsrc_stream(vfs_handle_struct *handle,
 					files_struct *fsp, const void *data,
-					size_t n, off_t offset)
+					off_t n, off_t offset)
 {
 	return SMB_VFS_NEXT_PWRITE(handle, fsp, data, n, offset);
 }
 
-static ssize_t fruit_pwrite_rsrc_xattr(vfs_handle_struct *handle,
+static soff_t fruit_pwrite_rsrc_xattr(vfs_handle_struct *handle,
 				       files_struct *fsp, const void *data,
-				       size_t n, off_t offset)
+				       off_t n, off_t offset)
 {
 	return SMB_VFS_NEXT_PWRITE(handle, fsp, data, n, offset);
 }
 
-static ssize_t fruit_pwrite_rsrc_adouble(vfs_handle_struct *handle,
+static soff_t fruit_pwrite_rsrc_adouble(vfs_handle_struct *handle,
 					 files_struct *fsp, const void *data,
-					 size_t n, off_t offset)
+					 off_t n, off_t offset)
 {
 	struct adouble *ad = NULL;
-	ssize_t nwritten;
+	soff_t nwritten;
 	int ret;
 
 	ad = ad_fget(talloc_tos(), handle, fsp, ADOUBLE_RSRC);
@@ -4416,12 +4416,12 @@
 	return n;
 }
 
-static ssize_t fruit_pwrite_rsrc(vfs_handle_struct *handle,
+static soff_t fruit_pwrite_rsrc(vfs_handle_struct *handle,
 				 files_struct *fsp, const void *data,
-				 size_t n, off_t offset)
+				 off_t n, off_t offset)
 {
 	struct fio *fio = (struct fio *)VFS_FETCH_FSP_EXTENSION(handle, fsp);
-	ssize_t nwritten;
+	soff_t nwritten;
 
 	if (fio == NULL) {
 		DBG_ERR("Failed to fetch fsp extension");
@@ -4449,12 +4449,12 @@
 	return nwritten;
 }
 
-static ssize_t fruit_pwrite(vfs_handle_struct *handle,
+static soff_t fruit_pwrite(vfs_handle_struct *handle,
 			    files_struct *fsp, const void *data,
-			    size_t n, off_t offset)
+			    off_t n, off_t offset)
 {
 	struct fio *fio = (struct fio *)VFS_FETCH_FSP_EXTENSION(handle, fsp);
-	ssize_t nwritten;
+	soff_t nwritten;
 
 	DBG_DEBUG("Path [%s] offset=%"PRIdMAX", size=%zd\n",
 		  fsp_str_dbg(fsp), (intmax_t)offset, n);
@@ -4474,7 +4474,7 @@
 }
 
 struct fruit_pwrite_state {
-	ssize_t nwritten;
+	soff_t nwritten;
 	struct vfs_aio_state vfs_aio_state;
 };
 
@@ -4486,7 +4486,7 @@
 	struct tevent_context *ev,
 	struct files_struct *fsp,
 	const void *data,
-	size_t n, off_t offset)
+	off_t n, off_t offset)
 {
 	struct tevent_req *req = NULL;
 	struct tevent_req *subreq = NULL;
@@ -4537,7 +4537,7 @@
 	tevent_req_done(req);
 }
 
-static ssize_t fruit_pwrite_recv(struct tevent_req *req,
+static soff_t fruit_pwrite_recv(struct tevent_req *req,
 					 struct vfs_aio_state *vfs_aio_state)
 {
 	struct fruit_pwrite_state *state = tevent_req_data(
@@ -5267,7 +5267,7 @@
 	unsigned int num_streams = *pnum_streams;
 	struct adouble *ad = NULL;
 	bool ok;
-	size_t rlen;
+	off_t rlen;
 	int i;
 
 	/*
@@ -5930,7 +5930,7 @@
 	uint32_t fsctl,
 	uint32_t ttl,
 	off_t offset,
-	size_t to_copy)
+	off_t to_copy)
 {
 	struct tevent_req *req = NULL;
 	struct tevent_req *subreq = NULL;
@@ -6155,7 +6155,7 @@
 
 	for (i = 0; i < num_streams; i++) {
 		DEBUG(10, ("%s: stream: '%s'/%zu\n",
-			  __func__, streams[i].name, (size_t)streams[i].size));
+			  __func__, streams[i].name, (off_t)streams[i].size));
 
 		src_fname_tmp = synthetic_smb_fname(
 			req,
@@ -6269,7 +6269,7 @@
 	return NULL;
 }
 
-static bool fruit_get_bandsize_from_line(char *line, size_t *_band_size)
+static bool fruit_get_bandsize_from_line(char *line, off_t *_band_size)
 {
 	static regex_t re;
 	static bool re_initialized = false;
@@ -6301,7 +6301,7 @@
 	if (!ok) {
 		return false;
 	}
-	*_band_size = (size_t)band_size;
+	*_band_size = (off_t)band_size;
 	return true;
 }
 
@@ -6311,7 +6311,7 @@
  */
 static bool fruit_get_bandsize(vfs_handle_struct *handle,
 			       const char *dir,
-			       size_t *band_size)
+			       off_t *band_size)
 {
 #define INFO_PLIST_MAX_SIZE 64*1024
 	char *plist = NULL;
@@ -6320,8 +6320,8 @@
 	uint8_t *file_data = NULL;
 	char **lines = NULL;
 	char *band_size_line = NULL;
-	size_t plist_file_size;
-	ssize_t nread;
+	off_t plist_file_size;
+	soff_t nread;
 	int numlines;
 	int ret;
 	bool ok = false;
@@ -6452,13 +6452,13 @@
 
 static bool fruit_get_num_bands(vfs_handle_struct *handle,
 				char *bundle,
-				size_t *_nbands)
+				off_t *_nbands)
 {
 	char *path = NULL;
 	struct smb_filename *bands_dir = NULL;
 	DIR *d = NULL;
 	struct dirent *e = NULL;
-	size_t nbands;
+	off_t nbands;
 	int ret;
 
 	path = talloc_asprintf(talloc_tos(),
@@ -6517,9 +6517,9 @@
 {
 	bool ok;
 	char *p = NULL;
-	size_t sparsebundle_strlen = strlen("sparsebundle");
-	size_t bandsize = 0;
-	size_t nbands;
+	off_t sparsebundle_strlen = strlen("sparsebundle");
+	off_t bandsize = 0;
+	off_t nbands;
 	off_t tm_size;
 
 	p = strstr(e->d_name, "sparsebundle");
